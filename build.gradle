buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = 'com.teamwizardry.worldcrafter'
archivesBaseName = 'worldcrafter'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: mcp_mappings_channel, version: mcp_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            arg "--mixin.config=" + archivesBaseName + ".mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            mods {
                worldcrafter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "--mixin.config=" + archivesBaseName + ".mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                worldcrafter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'worldcrafter', '--all', '--output', file('src/generated/resources/')

            mods {
                worldcrafter {
                    source sourceSets.main
                }
            }
        }
    }
}

allprojects {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://minecraft.curseforge.com/api/maven' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url 'http://maven.shadowfacts.net/' }
        maven {
            // for JEI
            name "progwml6"
            url "http://dvs1.progwml6.com/files/maven"
        }
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${mc_version}-${forge_version}"
    implementation 'org.yaml:snakeyaml:1.21'

    implementation 'org.spongepowered:spongeapi:7.0.0'
    implementation 'org.spongepowered:mixin:0.7.5-SNAPSHOT'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version
        expand 'version': project.version
    }

    // copy everything else that's not the mods.toml
    from (sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    archiveName = "${mod_id}-${version}.${extension}"

    manifest {
        attributes([
            "Specification-Title"     : "${mod_id}",
            "Specification-Vendor"    : "${mod_authors}",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : "${mod_id}",
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : "${mod_authors}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

test {
    useJUnitPlatform()
    testLogging.exceptionFormat = 'full'
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        html.destination file("$projectDir/jacoco")
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def rebofArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact rebofArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}